#! /bin/bash

set -euo pipefail 

readonly ssh="/usr/bin/ssh"
readonly separator="---"

load_hosts() {
	hosts_list=$(awk '!/^[#;]|localhost|127.0.0.1/ && NF {print $1}' $hosts_file)
	if [ $(echo "$hosts_list" | wc -l) -eq 0 ]; then 
		msg_error "Empty or malformated hosts file: $hosts_file"
	fi
}

check_get_uptime() {
	if [ 1 -eq $get_uptime ] || [ 1 -eq $get_all ]; then
		verbose_msg " -> server uptime" 
	   	uptime=$($ssh ${username}$host "cut -d ' ' -f 1 /proc/uptime") 
		uptime=$(convert_seconds $uptime)
	fi
}

check_get_users() {
	if [ 1 -eq $get_users ] || [ 1 -eq $get_all ]; then
		verbose_msg " -> getting users data"
	   users=$($ssh ${username}$host cat /etc/passwd | awk -F ':' '$3>=1000 {print $1}' | tr '\n' ',')
	   users=${users%,}
	fi
}

check_get_osversion() {
	if [ 1 -eq $get_os ] || [ 1 -eq $get_all ]; then
		verbose_msg " -> os version"
		osversion=$($ssh ${username}$host cat /etc/os-release | grep "PRETT" | sed 's/.*="\(.*\)"/\1/' | tr ' ' '-')
	fi
}

check_get_mem() {
	if [ 1 -eq $get_mem ] || [ 1 -eq $get_all ]; then
		verbose_msg " -> total memory"
		ram=$($ssh ${username}$host cat /proc/meminfo | awk '/MemTotal/ {$2=$2/(1024^2); print $2}' | xargs -I{} python -c 'print(round({}))') 
		ram=${ram%.*}
	fi
}

check_get_cpus() {
	if [ 1 -eq $get_cpucores ] || [ 1 -eq $get_all ]; then
		verbose_msg " -> cpu cores" 
	   	cpucores=$($ssh ${username}$host lscpu | awk '/^CPU\(s\)/ {print $2}')
	fi
}

run_check() {
	[ ! -z $file ] && rm -f $file
	if [ -z $host ]; then 
		load_hosts
		hosts="$hosts_list" 
	else
		hosts="$host"
	fi

	if [ $file ]; then
		echo "IP-ADDRESS HOSTNAME UPTIME USERS OS-RELEASE MEM-(GiB) CPU(s)" > $file
	   	verbose_msg "Writing to $file ... "
	fi
	defaultuser="root"
	local username="${defaultuser}@"
	local fetched_output=

	verbose_msg "$cmd v$VERSION begin"
	for host in $hosts; do
		[ $verbose -eq 0 ] && spinner "Gathering data..."
		verbose_msg "=== Fetching data for ${BOLD}$host${RESET} ===" 
		
		status=$(ssh -o BatchMode=yes -o PubkeyAuthentication=no -o PasswordAuthentication=no -o KbdInteractiveAuthentication=no -o ChallengeResponseAuthentication=no $host 2>&1 | grep -q "Permission denied"; echo $?)

		if [ $status -eq 255 ]; then 
			hostname=$($ssh ${username}$host hostname)
			check_get_uptime
			check_get_users
			check_get_osversion
			check_get_mem
			check_get_cpus
		fi
		
		output="$host ${hostname:-[OFF-LINE]} ${uptime:-$separator} ${users:-$separator} ${osversion:-$separator} ${ram:-$separator} ${cpucores:-$separator}"

		if [ ! -z $file ]; then 
			echo "$output" >> $file
			verbose_msg "====== Done appending to $file ======"
		else
			verbose_msg "=============== Done ==============="
			fetched_output="${fetched_output}\n$output"
		fi

		unset hostname uptime users osversion ram cpucores
		[ $verbose -eq 0 ] && end_spinner
	done
	
	verbose_msg "[${GREEN}âœ”${RESET}] Fetched Successfuly"

	if [ ! -z $file ]; then
		echo
		msg_success "Data written to ${BOLD}$file${RESET}"
	else
		echo
		msg_success "Done" 
		echo -e "$fetched_output" | column -t -s ' ' -N "IP-ADDRESS,HOSTNAME,UPTIME,USERS,OS-RELEASE,MEM-(GiB),CPU(s)" -W 4
	fi
	exit 0
}

check_main() {
	run_check
}

